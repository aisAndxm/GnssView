<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADR4OEA0eDhANHg4QLR4OEE0eDhBtHg4QjR4OEI0eDhCNHg
        4QjR4OEI0eDhCNHg4QjR4OEI0eDhCNHg4QjR4OEG0eDhBNHg4QLR4OEC0eDhAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0eDhAtHg4QTR4OEKytnaEMzb3BbN3N0czdzdIs7d
        3iTO3d4mzt3eJs7d3ibO3d4mzt3eJs7d3ibO3d4kzdzdIs3c3R7M29wYy9naENHg4QrR4OEE0eDhAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIuVlgCsuboGrLi5Dq67uxyzwMEqucfIPL/N
        zkjA0NFSwtHSWsPS01zD0tNew9LTXsPS017D0tNew9LTXMLR0lrB0NFUwM7PTLzKyz63xMUwssDAILTB
        whK4xcYIvMnKAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYmlpBGZubhJcZGQ0XWZnXG14
        eHyAjY6Vj56fpZmqq7GfsLG5orO0vaKztL2itLW9orS1vaKztL2is7S9oLGyu5ysrbOSoqOrhpSVm3aD
        g4VqdHVianJzOn2HiBaNl5gIaHBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIlKSkUJCcoVEFK
        S6taaWvbX25x62t7fvF1iIr1fZGU+YOXmvuFmZz7hpqd+4aanvuGmp77hpqd+4WZnPuEmJv7f5OW+XiL
        jvdugIPzZHR37WFwct1JVFWvMjg4WkNISBhARUUCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgwO
        Dk5SYGLTTlpd/0BISf9BRkj/Q0lK/0VLTf9HTU//SE9Q/0pQUf9JUFH/OT9B/0tRU/9LUVL/SlBR/0hP
        UP9HTU//RUtN/0NJSv9BRkj/QEdJ/05aXf9XZGfVHB8fUhcZGQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAeSFRWr0VPUf8/RUb/Q0lK/0ZMTf9JT1H/S1JT/01UVf9PVlf/UFdZ/0ZNTv82PD7/Ulla/1FZ
        Wv9QV1n/T1ZX/01UVf9LUlP/SU9R/0ZMTf9DSUr/P0VG/0VPUf9MWVqxCgsMIAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAABAAAADhbam3rQEVG/0RKS/9IT0//TFJT/09VV/9SWVr/VFtc/1ZdXv9XX2D/PENG/zA2
        Of9MU1b/WGBh/1dfYP9WXV7/VFtc/1JZWv9PVVf/TFJT/0hPT/9ESkv/QEVG/1xsbu0GBgY6AAAABAAA
        AAAAAAAAAAAAAAAAAAAAAAAGAAAASl1pbPtESUv/SU9Q/05UVf9RWFn/VVtd/1hfYP9bYmP/XWRl/15l
        Z/8+RUf/MTg7/zxDRv9XX2D/XmVn/11kZf9bYmP/WF9g/1VbXf9RWFn/TlRV/0lPUP9ESUv/XWlt+wYG
        BkwAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAYAAABQX2tu/UhOUP9OVFb/Ullb/1ZdX/9aYWP/XWVn/2Bo
        av9iamz/ZGxu/zpBRP81PD//PERG/0hPUv9kbG7/Ymps/2Boav9dZWf/WmFj/1ddX/9SWVv/TlRW/0hO
        Uf9fa279BQYGUgAAAAYAAAAAAAAAAAAAAAAAAAAAAAAABgAAAFJkcHP9TFNV/1JZXP9XXmH/XGNl/2Bn
        av9ja23/Zm5w/2hxc/9qcnT/QEhK/z5FSP8+RUj/O0NG/1RcXv9ocXP/Zm5w/2Nrbf9gZ2r/XGNl/1de
        Yf9SWVz/TVNW/2Rwc/0FBQVUAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAUmh0dv1QWVv/Vl9h/1tk
        Zv9gaWv/ZW5v/2hxc/9rdHb/bXZ4/2Boa/8+R0n/RUxP/1JYW/9RV1r/UVda/3iBg/9rdHb/aHFz/2Vu
        b/9gaWv/W2Rm/1ZeYP9QWVv/aHR2/QUFBVQAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAYAAABSbHh6/VRe
        YP9aZGb/X2pr/2RvcP9pc3T/bHZ4/296e/9kbW//QkpN/0ZOUf9XXWH/V11f/1ddX/9SWFv/dX1//3iB
        g/9sdnj/aXN0/2RvcP9famv/WmRm/1ReYP9seHr9BAUFUgAAAAYAAAAAAAAAAAAAAAAAAAAAAAAABgAA
        AFJxe379V2Jl/11oa/9jbnD/aHN1/213ef9xe33/dH6A/0xUV/9HUFL/RU1Q/1phY/9cYmT/U1VW/1le
        YP9UXV//iJGT/3F7ff9td3n/aHN1/2NucP9daGv/V2Jl/3F7fv0DBARSAAAABgAAAAAAAAAAAAAAAAAA
        AAAAAAAGAAAAUnV/gf1aZ2n/YW1v/2dzdf9sd3n/cXx9/3R/gf94g4T/S1RW/01WWP9JUVT/XmRn/15k
        Z/9pa2v/fIOE/4KMjv+HkJL/dYCB/3F8ff9sd3n/Z3N1/2Ftb/9aZ2n/cXp8/QIDA1IAAAAGAAAAAAAA
        AAAAAAAAAAAAAAAAAAYAAABSeIKE/V5qbf9lcXP/a3Z4/3B7ff90f4H/eIOF/3yGiP9kbW//S1NW/1Fa
        XP9gZ2v/cnp8/3l8fP+Ciov/lp+g/36Iiv94g4X/dH+B/3B7ff9aZGb/W2Vn/1lkZv9vd3n9AgICUgAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAABgAAAFJ7hYf9Ym9x/2h1dv9uenv/c36A/3iDhf97hoj/b3h6/3aA
        gv9cZmj/YGhr/3iChP+OlZb/dHRv/4uMjv+Ejo//fomK/3uGiP94g4X/WmJk/0VMTv9BSEr/O0FD/2Vs
        bv0AAABSAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAUn6Hiv1lcXT/bHd5/3F8fv92gIP/bHV3/2Fq
        bP9ye33/hI6Q/4aPkf+HkJL/hpCS/5F/cP+QdFf/gGpZ/4GGhv+Ci43/fYeK/3qEh/9MU1X/REpN/0BG
        SP88QkT/aG5w/QAAAFIAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAYAAABSgIqM/Wh0dv9tenz/c3+B/1BY
        Wv9cZWf/bHV4/4CKjP94gYP/fYeJ/4WPkf+IkpT/o4dr/7ecgv+Ud1r/fnx2/4ONj/+Ai4z/fIeJ/0pS
        VP9FTE7/P0VH/z5ERv9qcXL9AAAAUgAAAAYAAAAAAAAAAAAAAAAAAAAAAAAABgAAAFKCjI79aXZ5/216
        fP9ocnT/R05Q/2Jrbf+BjI3/hI6Q/3yFiP+IkpT/iZSV/4qUlv+XioP/sJF3/5mAc/+Hj5D/hI+Q/4GM
        jf98iIr/Xmdp/0pRU/9ARkn/O0BC/2tyc/0AAABSAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAUoOO
        j/1seXr/b3t+/1BYWv9LUlX/S1NV/1xkZ/9ncHL/anN1/4iTlf+KlJb/ipSW/4qVlv+KlJb/iJOV/4eR
        k/+Ej5H/go2P/32Iiv96hoj/U1pc/0NJS/87QUP/bnV1/QAAAFIAAAAGAAAAAAAAAAAAAAAAAAAAAAAA
        AAYAAABShI+R/Wx5fP9VXmH/REpN/0hOUf9LUlX/TlVX/1BXWv9SWVz/a3R3/4mUlv+KlZf/ipWX/4mU
        lv+Ik5X/hpGT/4SPkv+CjY//f4qN/3uHif9td3r/XGVo/1RdYP93gIH9AAAAUgAAAAYAAAAAAAAAAAAA
        AAAAAAAAAAAABgAAAFCFj5H9bnp9/11maf9ESk3/SE5R/0tRVP9NVFf/UFZa/15maf9gaGv/anJ1/4qU
        lv+KlJb/iZOW/4mSlf+HkZP/hY+R/4KNj/9/ioz/fIeJ/2Rtb/9IUFH/XWhr/4WPkf0AAABQAAAABgAA
        AAAAAAAAAAAAAAAAAAAAAAAGAAAASoaQkv1ve37/c3+C/1ZeYP9KUFP/TlVY/1FXW/9TWlz/bnd5/2Fp
        a/9TW17/W2Jk/4KNj/94g4X/h5GT/4aQkv+EjpH/gYyO/36JjP97hon/d4OG/2Jtb/88QUT/b3R2/QAA
        AEoAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAA4iZOV+298fv9zf4L/VV5g/0VKTf9ITVD/SlBT/0xS
        Vf9OVFf/T1ZZ/294e/9RWFr/Ullc/2dwcv+FkJL/hI+R/4KNkP+Ai47/fYmL/3qGiP9mcHP/VV5g/2Rv
        cf90e337AAAAOAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAB54gIPfXmxv/2d1d/9PVlj/QkhK/0VL
        Tf9ITU//Sk9S/0tRVP99iYv/g4+S/2Nsb/9bY2b/eYOG/4KOkf9+i43/fImL/32KjP97iIr/eIWI/3WC
        hf9senz/aHZ5/3iAgt8AAAAeAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnV9fnxMUVP/OT4//z5D
        RP9ARUf/QkdK/0RKTP9GTE7/TVRW/0tRU/9ia27/dH+D/3N+gf9faGv/gIyO/2Nsb/9UW17/b3t+/3mG
        iP9fa27/bXp9/3B9gP98iYv/fICCfAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAEJOZ
        mpVweXv9XGZn/2Brbv9ten3/Y25w/2h0d/9RWFv/Z3J1/2lzdv9oc3b/Xmdq/2Zxc/98iYv/eIaI/0JH
        Sf9ARUf/Q0lM/2t5e/93hYf/h5OU/ZednpcAAAAQAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAACAAAACn1+fjiZnZ56kZiZlY2UlpeOlZaXjpWWl4+WlpeQlpiXkJeYl4+Vl5eMkpSXhIuNl4uR
        kpdncXaXUF1kl09cY5dOW2KXUV9mlZidnXx9fn44AAAACgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAQAAAAGAAAABgAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAA
        AAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAYAAAAGAAAABAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////4AA//wAAD/4AAAf8AAAD/AAAA/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AA
        AA/4AAAf+AAAH/8AAP////////////////8=
</value>
  </data>
</root>